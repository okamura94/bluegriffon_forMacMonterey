<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is BlueGriffon.
   -
   - The Initial Developer of the Original Code is
   - Disruptive Innovations SARL.
   - Portions created by the Initial Developer are Copyright (C) 2008
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Daniel Glazman (daniel.glazman@disruptive-innovations.com), Original Author
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="ecolorpickerBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="ecolorpicker">

    <resources>
      <stylesheet src="chrome://bluegriffon/skin/ecolorpicker.css"/>
    </resources>

    <content>
#ifndef XP_MACOSX
      <xul:hbox class="colorpicker-button-colorbox" anonid="colorbox" flex="1" xbl:inherits="disabled"/>
#else
      <html:input class="colorpicker-button-colorbox" 
                  anonid="colorbox"
                  type="color"
                  oninput="this.parentNode.update(this.value)"/>
#endif
    </content>

    <implementation>
      <constructor>
        try {
          Components.utils.import("resource://gre/modules/colourPickerHelper.jsm");
        } catch (e) {}
#ifdef XP_MACOSX
        var colorpicker = this.getChild("colorbox");
        if (this.hasAttribute("color")) colorpicker.setAttribute("value", this.getAttribute("color"));
        if (this.hasAttribute("showTransparency")) colorpicker.setAttribute("showTransparency", this.getAttribute("showTransparency"));
#endif
      </constructor>

      <method name="getChild">
        <parameter name="aChildName"/>
        <body><![CDATA[
          return document.getAnonymousElementByAttribute(this, "anonid", aChildName);
        ]]></body>
      </method>

      <property name="mColorBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'colorbox')" />

      <property name="color"
                onget="return this.getAttribute('color');"
#ifndef XP_MACOSX
                onset="this.setAttribute('color', val); this.setAttribute('tooltiptext', val); this.mColorBox.style.backgroundColor = val;"/>
#else
                onset="this.getChild('colorbox').value = val; this.setAttribute('color', val); this.setAttribute('tooltiptext', val); this.mColorBox.style.backgroundColor = val;"/>
#endif

      <property name="disabled"
                onget="return this.getAttribute('disabled');"
#ifndef XP_MACOSX
                onset="SetEnabledElement(this, !val)"/>
#else
                onset="SetEnabledElement(this.getChild('colorbox'), !val); SetEnabledElement(this, !val)"/>
#endif

      <property name="shownColor"
                onget="return this.mColorBox.style.backgroundColor;"/>

      <method name="open">
        <parameter name="aColorObjectId"/>
        <parameter name="aWindowTitle"/>
        <parameter name="aShowTransparency"/>
        <body>
        <![CDATA[
          var cph = ColorPickerHelper;
          cph.openColorPicker(window, aColorObjectId, aWindowTitle, aShowTransparency);
          if (!cph.isCancelled(aColorObjectId))
          {
            var currentColor = cph.getCurrentColor(aColorObjectId)
            this.color = currentColor;
            this.mColorBox.style.backgroundColor = currentColor;
            this.setAttribute("color", currentColor);
            this.setAttribute("tooltiptext", currentColor);
          }
        ]]>
        </body>
      </method>

#ifdef XP_MACOSX
      <method name="update">
        <parameter name="aValue"/>
        <body>
        <![CDATA[
          this.color = aValue;
          if (this.hasAttribute("oncommand")) {
            var fn = new Function(this.getAttribute("oncommand"));
            fn.call(this) == false;
          }
        ]]>
        </body>
      </method>
#endif

    </implementation>

#ifndef XP_MACOSX
    <handlers>
      <handler event="click" phase="capturing">
        <![CDATA[
          if (!this.getAttribute("disabled")) {
            this.open(this.getAttribute("colorObjectId"),
                      this.getAttribute("windowTitle"),
                      this.getAttribute("showTransparency"));
            if (this.hasAttribute("oncommand")) {
              var fn = new Function(this.getAttribute("oncommand"));
              fn.call(this) == false;
            }
          }
        ]]>
      </handler>
    </handlers>
#endif
  </binding>

</bindings>
